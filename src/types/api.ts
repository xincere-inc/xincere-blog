/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user */
        post: operations["registerUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        SignupInput: {
            /**
             * Format: email
             * @description The email address of the user. Must be a valid email format.
             * @example user@example.com
             */
            email: string;
            /**
             * Format: password
             * @description The password for the user. Must be at least 8 characters.
             * @example Password123!
             */
            password: string;
            /**
             * @description The name of the user. Must be at least 3 characters long.
             * @example John Doe
             */
            name: string;
        };
        SignupResponse: {
            /**
             * @description Success message indicating user creation.
             * @example User created successfully
             */
            message?: string;
            user?: {
                /**
                 * Format: uuid
                 * @description Unique identifier for the newly created user.
                 * @example 123e4567-e89b-12d3-a456-426614174000
                 */
                id?: string;
                /**
                 * Format: email
                 * @description The email address of the newly created user.
                 * @example user@example.com
                 */
                email?: string;
                /**
                 * @description The name of the newly created user.
                 * @example John Doe
                 */
                name?: string;
            };
        };
        ErrorResponse: {
            /**
             * @description Description of the error encountered.
             * @example User already exists
             */
            error?: string;
            details?: {
                /**
                 * @description Error message for a specific validation failure.
                 * @example Password must be at least 8 characters.
                 */
                message?: string;
                /**
                 * @description The field that failed validation.
                 * @example password
                 */
                field?: string;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    registerUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupInput"];
            };
        };
        responses: {
            /** @description User registered successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SignupResponse"];
                };
            };
            /** @description Invalid email format, missing required fields, or user already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error, e.g., database failure or internal issue */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
