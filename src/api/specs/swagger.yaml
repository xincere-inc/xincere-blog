openapi: 3.0.0
info:
  title: Next.js API
  description: API documentation for Next.js 15 application
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UnAuthorizedError:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Please log in.
    ForbiddenError:
      type: object
      properties:
        error:
          type: string
          example: Forbidden
        message:
          type: string
          example: You do not have permission.
    NotFoundError:
      type: object
      properties:
        error:
          type: string
          example: NotFound
        message:
          type: string
          example: The target data does not exist.
    UnprocessableEntity:
      type: object
      properties:
        error:
          type: string
          example: UnprocessableEntity
        message:
          type: string
          example: The submission content is not appropriate.
    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: ValidationError
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: email
              message:
                type: string
                example: Invalid email address
    InternalServerError:
      type: object
      properties:
        error:
          type: string
          example: InternalServerError
        message:
          type: string
          example: Server error.
    Success:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Success
    Created:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Created
    CreatedWithId:
      type: object
      required:
        - message
        - id
      properties:
        message:
          type: string
          example: Created
        id:
          type: number
          example: 1
tags:
  - name: Auth
    description: Endpoints related to authentication
paths:
  /api/admin/users/create-user:
    post:
      summary: Register a new user
      description: >-
        Creates a new user, hashes their password, generates an email
        verification token, and sends a verification email.
      operationId: adminCreateUser
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - country
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                country:
                  type: string
                  example: Bangladesh
                gender:
                  type: string
                  enum:
                    - male
                    - female
                    - other
                  example: male
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
                phone:
                  type: string
                  example: '1234567890'
                address:
                  type: string
                  example: 123 Main St
                role:
                  type: string
                  example: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        '400':
          description: Validation errors or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'User already exists with this email: user@example.com'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/users/delete-user:
    delete:
      summary: Delete users by IDs
      description: >-
        Admin can delete user accounts including their own, but not other
        admins.
      operationId: adminDeleteUsers
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  example:
                    - 123e4567-e89b-12d3-a456-426614174000
                    - 123e4567-e89b-12d3-a456-426614174001
      responses:
        '200':
          description: Users deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Some users not found with the provided IDs
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/users/get-user:
    post:
      summary: Fetch users with pagination and search
      description: Retrieves users from the database with pagination and optional search.
      operationId: adminGetUsers
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                search:
                  type: string
                  example: john
      responses:
        '200':
          description: Successfully retrieved users with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        email:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
                        country:
                          type: string
                        address:
                          type: string
                        phone:
                          type: string
                        role:
                          type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalUsers:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: page
                        message:
                          type: string
                          example: Page must be a number
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/users/update-user:
    put:
      summary: Update user details
      description: Update details of an existing user based on the provided user ID.
      operationId: adminUpdateUser
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  description: The ID of the user to update.
                  example: 123e4567-e89b-12d3-a456-426614174000
                email:
                  type: string
                  description: The email address of the user.
                  example: johndoe@example.com
                firstName:
                  type: string
                  description: The first name of the user.
                  example: John
                lastName:
                  type: string
                  description: The last name of the user.
                  example: Doe
                address:
                  type: string
                  description: The address of the user.
                  example: 123 Main St, Springfield, IL
                phone:
                  type: string
                  description: The phone number of the user.
                  example: '+1234567890'
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  description: The role of the user.
                  example: user
                country:
                  type: string
                  description: The country of the user.
                  example: USA
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174000
                      email:
                        type: string
                        example: johndoe@example.com
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      address:
                        type: string
                        example: 123 Main St, Springfield, IL
                      phone:
                        type: string
                        example: '+1234567890'
                      role:
                        type: string
                        enum:
                          - USER
                          - ADMIN
                        example: USER
                      country:
                        type: string
                        example: USA
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: email
                        message:
                          type: string
                          example: Invalid email format
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  message:
                    type: string
                    example: Error during registration
  /api/admin/categories/create-category:
    post:
      summary: Create a new category
      description: Creates a new category with a unique name and slug.
      operationId: adminCreateCategory
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                  description: The name of the category.
                  example: Technology
                slug:
                  type: string
                  description: The unique slug for the category.
                  example: technology
                description:
                  type: string
                  description: The description of the category (optional).
                  example: Articles related to technology and innovation.
                  nullable: true
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the category.
                        example: 1
                      name:
                        type: string
                        description: The name of the category.
                        example: Technology
                      slug:
                        type: string
                        description: The unique slug for the category.
                        example: technology
                      description:
                        type: string
                        description: The description of the category (optional).
                        example: Articles related to technology and innovation.
                        nullable: true
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Category already exists with this slug: technology'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/categories/get-category:
    get:
      summary: Fetch categories with pagination and search
      description: Retrieves categories from the database with pagination and optional search using query parameters.
      operationId: adminGetCategories
      tags:
        - Admin
      security:
        - jwt: []
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
            default: 1
          description: The page number for pagination.
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            example: 10
            default: 10
          description: The number of categories to return per page.
        - name: search
          in: query
          required: false
          schema:
            type: string
            example: tech
          description: Optional search term to filter categories by name or description.
      responses:
        '200':
          description: Successfully retrieved categories with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the category.
                        name:
                          type: string
                          description: The name of the category.
                        slug:
                          type: string
                          description: The unique slug for the category.
                        description:
                          type: string
                          description: The description of the category (optional).
                          nullable: true
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was last updated.
                        deletedAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was deleted (optional).
                          nullable: true
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalCategories:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/categories/update-category:
    put:
      summary: Update category details
      description: Updates details of an existing category based on the provided category ID.
      operationId: adminUpdateCategory
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: The ID of the category to update.
                  example: 1
                name:
                  type: string
                  description: The name of the category.
                  example: Technology
                slug:
                  type: string
                  description: The unique slug for the category.
                  example: technology
                description:
                  type: string
                  description: The description of the category (optional).
                  example: Articles related to technology and innovation.
                  nullable: true
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category updated successfully
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the category.
                        example: 1
                      name:
                        type: string
                        description: The name of the category.
                        example: Technology
                      slug:
                        type: string
                        description: The unique slug for the category.
                        example: technology
                      description:
                        type: string
                        description: The description of the category (optional).
                        example: Articles related to technology and innovation.
                        nullable: true
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/categories/delete-category:
    delete:
      summary: Delete categories by IDs
      description: Deletes categories by their IDs (soft delete, sets deletedAt).
      operationId: adminDeleteCategories
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: Categories deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Some categories not found with the provided IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/create-tag:
    post:
      summary: Create a new tag
      description: Creates a new tag with a unique name.
      operationId: adminCreateTag
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The unique name of the tag.
                  example: Tech
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created
                  tag:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the tag.
                        example: 1
                      name:
                        type: string
                        description: The name of the tag.
                        example: Tech
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or tag already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Tag already exists with this name: Tech'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/get-tags:
    get:
      summary: Fetch tags with pagination and search
      description: Retrieves tags from the database with pagination and optional search using query parameters.
      operationId: adminGetTags
      tags:
        - Admin
      security:
        - jwt: []
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
            default: 1
          description: The page number for pagination.
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            example: 10
            default: 10
          description: The number of tags to return per page.
        - name: search
          in: query
          required: false
          schema:
            type: string
            example: tech
          description: Optional search term to filter tags by name.
      responses:
        '200':
          description: Successfully retrieved tags with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the tag.
                          example: 1
                        name:
                          type: string
                          description: The name of the tag.
                          example: Tech
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the tag was created.
                          example: 2025-06-05T07:55:00Z
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the tag was last updated.
                          example: 2025-06-05T07:55:00Z
                        deletedAt:
                          type: string
                          format: date-time
                          description: The date and time when the tag was deleted (optional).
                          example: null
                          nullable: true
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalTags:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/update-tag:
    put:
      summary: Update tag details
      description: Updates details of an existing tag based on the provided tag ID.
      operationId: adminUpdateTag
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: The ID of the tag to update.
                  example: 1
                name:
                  type: string
                  description: The name of the tag.
                  example: Tech
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag updated successfully
                  tag:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the tag.
                        example: 1
                      name:
                        type: string
                        description: The name of the tag.
                        example: Tech
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/delete-tag:
    delete:
      summary: Delete tags by IDs
      description: Deletes tags by their IDs (soft delete, sets deletedAt).
      operationId: adminDeleteTags
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: Tags deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Some tags not found with the provided IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/contacts/get-contact:
    get:
      summary: Fetch contacts with pagination and search
      description: Retrieves contacts from the database with pagination and optional search using query parameters.
      operationId: adminGetContacts
      tags:
        - Admin
      security:
        - jwt: []
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            example: 1
            default: 1
          description: The page number for pagination.
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            example: 10
            default: 10
          description: The number of contacts to return per page.
        - name: search
          in: query
          required: false
          schema:
            type: string
            example: 'John'
          description: Optional search term to filter contacts by company name, contact name, or email.
      responses:
        '200':
          description: Successfully retrieved contacts with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the contact.
                        companyName:
                          type: string
                          description: The name of the company.
                        contactName:
                          type: string
                          description: The name of the contact person.
                        email:
                          type: string
                          description: The email address of the contact person.
                        phone:
                          type: string
                          description: The phone number of the contact person.
                        inquiry:
                          type: string
                          description: The content of the inquiry.
                        status:
                          type: string
                          description: The status of the contact.
                        privacyPolicy:
                          type: boolean
                          description: Agreement to the privacy policy.
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the contact was created.
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalContacts:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/contacts/delete-contact:
    delete:
      summary: Delete contacts by IDs
      description: Deletes contacts by their IDs.
      operationId: adminDeleteContacts
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: Contacts deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Some contacts not found with the provided IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/change-password:
    post:
      summary: Change user password
      description: >-
        Allows an authenticated user to change their password by providing the
        old and new password.
      operationId: changePassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  example: oldPassword123
                newPassword:
                  type: string
                  example: newSecurePassword456
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error, same old and new password, or invalid old password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '401':
          description: Unauthorized or session expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/forget-password:
    post:
      summary: Send a password reset email
      description: >-
        Sends a reset password email with a secure token link. Each user is
        allowed a maximum of 3 emails per hour.
      operationId: ForgetPassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error or missing email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is required
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email not found.
        '429':
          description: Too many requests within a short period
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Too many requests. Please try again later (1 hr).
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/register:
    post:
      summary: Register a new user
      description: >-
        Creates a new user, hashes their password, generates an email
        verification token, and sends a verification email.
      operationId: Register
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - email
                - password
                - confirmPassword
                - gender
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                country:
                  type: string
                  example: Bangladesh
                gender:
                  type: string
                  enum:
                    - male
                    - female
                    - other
                  example: male
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
                confirmPassword:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/reset-password:
    post:
      summary: Reset password for a user
      description: >-
        Resets the user's password using a provided reset token and new
        password. The reset token is invalidated after the reset.
      operationId: resetPassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: d4c79ab8-b6b7-48b4-b5a4-56e8d41be26f
                newPassword:
                  type: string
                  format: password
                  example: NewSecureP@ssw0rd
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid or expired token, or missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token and new password are required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/verify-email-request:
    post:
      summary: Send verification email to a registered user
      description: >-
        This endpoint sends a verification email to the user with the provided
        email address.
      operationId: sendVerificationEmail
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error or missing email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email not found.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/verify-email:
    get:
      summary: Verify user email
      description: >-
        Verifies the user's email address using a provided verification token.
        Marks the user's email as verified in the database.
      operationId: verifyEmail
      tags:
        - Auth
      parameters:
        - in: query
          name: token
          required: true
          description: The email verification token sent to the user's email address.
          schema:
            type: string
            example: d4c79ab8-b6b7-48b4-b5a4-56e8d41be26g
      responses:
        '200':
          description: Email successfully verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid or expired token, or token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token is required
                  message:
                    type: string
                    example: The provided token is invalid or has expired
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/contact:
    post:
      summary: Submit a contact form inquiry
      tags:
        - Contact
      operationId: submitContactForm
      description: Submits a contact form with company details, contact information, and inquiry content. Stores the submission in the database and optionally sends a confirmation email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - companyName
                - contactName
                - email
                - phone
                - inquiry
                - privacyPolicy
              properties:
                companyName:
                  type: string
                  description: The name of the company submitting the contact form.
                  example: Example Corp
                contactName:
                  type: string
                  description: The name of the contact person submitting the form.
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: The email address of the contact person.
                  example: user@example.com
                phone:
                  type: string
                  description: The phone number of the contact person.
                  example: +1234567890
                inquiry:
                  type: string
                  description: The content of the inquiry or message.
                  example: I have a question about your services.
                privacyPolicy:
                  type: boolean
                  description: Indicates whether the user agrees to the privacy policy.
                  example: true
      responses:
        '201':
          description: Contact form submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        '400':
          description: Invalid input or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'User already exists with this email: user@example.com'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/categories:
    get:
      summary: Fetch categories with pagination
      description: Retrieves categories from the database with pagination using skip and take query parameters.
      operationId: getCategories
      tags:
        - Categories
      parameters:
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            example: 0
            default: 0
          description: The number of categories to skip for pagination.
        - name: take
          in: query
          required: true
          schema:
            type: integer
            example: 5
            default: 5
          description: The number of categories to return per request.
      responses:
        '200':
          description: Successfully retrieved categories with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully retrieved categories
                  categories:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the category.
                        name:
                          type: string
                          description: The name of the category.
                        slug:
                          type: string
                          description: The unique slug for the category.
                        description:
                          type: string
                          nullable: true
                          description: The description of the category (optional).
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was last updated.
                        deletedAt:
                          type: string
                          format: date-time
                          nullable: true
                          description: The date and time when the category was deleted (optional).
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/articles:
    get:
      summary: Fetch articles with pagination
      description: Retrieves articles from the database with pagination using skip and take query parameters, optionally filtered by category.
      operationId: getArticles
      tags:
        - Articles
      parameters:
        - name: skip
          in: query
          required: true
          schema:
            type: integer
            example: 0
            default: 0
          description: The number of articles to skip for pagination.
        - name: take
          in: query
          required: true
          schema:
            type: integer
            example: 9
            default: 9
          description: The number of articles to return per request.
        - name: category
          in: query
          required: false
          schema:
            type: string
            example: 'Technology'
          description: The name of the category to filter articles by (optional).
      responses:
        '200':
          description: Successfully retrieved articles with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully retrieved articles
                  total:
                    type: integer
                    example: 25
                    description: The total number of articles matching the query.
                  articles:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the article.
                          example: 1
                        title:
                          type: string
                          description: The title of the article.
                          example: 'Introduction to Machine Learning'
                        slug:
                          type: string
                          description: The unique slug for the article.
                          example: 'introduction-to-machine-learning'
                        summary:
                          type: string
                          description: A brief summary of the article.
                          example: 'This article explores the basics of machine learning concepts.'
                        thumbnailUrl:
                          type: string
                          nullable: true
                          description: The URL of the article's thumbnail image (optional).
                          example: 'https://example.com/thumbnail.jpg'
                        status:
                          type: string
                          enum: [DRAFT, PUBLISHED, ARCHIVED]
                          description: The publication status of the article.
                          example: 'PUBLISHED'
                        author:
                          type: object
                          properties:
                            id:
                              type: string
                              description: The unique identifier for the author.
                              example: 'auth_123'
                            name:
                              type: string
                              description: The name of the author (optional, assuming Author model has a name field).
                              example: 'John Doe'
                          description: The author of the article.
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: The unique identifier for the category.
                              example: 1
                            name:
                              type: string
                              description: The name of the category.
                              example: 'Technology'
                            slug:
                              type: string
                              description: The unique slug for the category.
                              example: 'technology'
                          description: The category of the article.
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the article was created.
                          example: '2025-06-17T08:30:00Z'
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the article was last updated.
                          example: '2025-06-17T08:30:00Z'
                        deletedAt:
                          type: string
                          format: date-time
                          nullable: true
                          description: The date and time when the article was deleted (optional).
                          example: null
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/articles/{id}/view:
    post:
      summary: Increment article view count
      tags: [Articles]
      operationId: incrementArticleViewCount
      description: Increments the view count for an article and returns the updated count.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the article to view.
          schema:
            type: string
      responses:
        '200':
          description: View count incremented successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  viewsCount:
                    type: integer
                    description: The updated view count for the article.
                    example: 42
        '400':
          description: Invalid article ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Invalid article ID'
        '404':
          description: Article not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Article not found'
  /api/admin/contacts/update-contact:
    put:
      summary: Update contact status
      description: Update only the status of a contact by ID.
      operationId: adminUpdateContact
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
                - status
              properties:
                id:
                  type: integer
                  description: The ID of the contact to update.
                  example: 1
                status:
                  type: string
                  description: The new status for the contact.
                  enum:
                    - OPEN
                    - INPROGRESS
                    - CLOSED
                  example: OPEN
      responses:
        '200':
          description: Contact status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Contact status updated successfully
                  contact:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      status:
                        type: string
                        enum:
                          - OPEN
                          - INPROGRESS
                          - CLOSED
                        example: OPEN
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Contact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/articles/get-article:
    post:
      summary: Fetch articles with pagination and search
      description: Retrieves articles from the database with pagination and optional search using request body parameters.
      operationId: adminGetArticles
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                  description: The page number for pagination.
                limit:
                  type: integer
                  example: 10
                  description: The number of articles to return per page.
                search:
                  type: string
                  example: 'tech'
                  description: Optional search term to filter articles by title, slug, summary, content, or status.
      responses:
        '200':
          description: Successfully retrieved articles with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the article.
                        title:
                          type: string
                          description: The title of the article.
                        slug:
                          type: string
                          description: The unique slug for the article.
                        summary:
                          type: string
                          description: A brief summary of the article.
                        content:
                          type: string
                          description: The HTML content of the article.
                        markdownContent:
                          type: string
                          description: The markdown content of the article.
                        thumbnailUrl:
                          type: string
                          description: The URL of the article's thumbnail image.
                        status:
                          type: string
                          enum: [DRAFT, PUBLISHED, ARCHIVED]
                          description: The publication status of the article.
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the article was created.
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the article was last updated.
                        author:
                          type: object
                          properties:
                            id:
                              type: string
                              description: The unique identifier for the author.
                            name:
                              type: string
                              description: The name of the author.
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              description: The unique identifier for the category.
                            name:
                              type: string
                              description: The name of the category.
                        tags:
                          type: array
                          description: List of tags associated with the article.
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                description: The unique identifier for the tag.
                              name:
                                type: string
                                description: The name of the tag.
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalArticles:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/articles/create-article:
    post:
      summary: Create a new article
      description: Creates a new article with a unique slug. Tags will be created if they do not exist and linked to the article. The first author in the database will be assigned.
      operationId: adminCreateArticle
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - slug
                - summary
                - content
                - markdownContent
                - categoryId
              properties:
                title:
                  type: string
                  description: The title of the article.
                  example: Introduction to Machine Learning
                slug:
                  type: string
                  description: The unique slug for the article.
                  example: introduction-to-machine-learning
                summary:
                  type: string
                  description: A brief summary of the article.
                  example: This article explores the basics of machine learning concepts.
                content:
                  type: string
                  description: The HTML content of the article.
                  example: <p>Machine learning is...</p>
                markdownContent:
                  type: string
                  description: The markdown content of the article.
                  example: "# Machine Learning\nMachine learning is..."
                categoryId:
                  type: integer
                  description: The ID of the category.
                  example: 1
                thumbnailUrl:
                  type: string
                  description: The URL of the article's thumbnail image (optional).
                  example: https://example.com/thumbnail.jpg
                  nullable: true
                status:
                  type: string
                  enum: [DRAFT, PUBLISHED, ARCHIVED]
                  description: The publication status of the article.
                  example: PUBLISHED
                tags:
                  type: array
                  items:
                    type: string
                  description: List of tag names to associate with the article (optional).
                  example: ['Tech', 'AI']
      responses:
        '201':
          description: Article created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Article created successfully.
        '400':
          description: Validation errors or article already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Article already exists with this slug: introduction-to-machine-learning'
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: title
                        message:
                          type: string
                          example: Title is required
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/articles/update-article:
    put:
      summary: Update article details
      description: Updates details of an existing article based on the provided article ID. Tags will be created if they do not exist and linked to the article. All tag associations will be replaced.
      operationId: adminUpdateArticle
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: The ID of the article to update.
                  example: 1
                title:
                  type: string
                  description: The title of the article.
                  example: Introduction to Machine Learning
                slug:
                  type: string
                  description: The unique slug for the article.
                  example: introduction-to-machine-learning
                summary:
                  type: string
                  description: A brief summary of the article.
                  example: This article explores the basics of machine learning concepts.
                content:
                  type: string
                  description: The HTML content of the article.
                  example: <p>Machine learning is...</p>
                markdownContent:
                  type: string
                  description: The markdown content of the article.
                  example: "# Machine Learning\nMachine learning is..."
                categoryId:
                  type: integer
                  description: The ID of the category.
                  example: 1
                authorId:
                  type: string
                  description: The ID of the author.
                  example: 1
                thumbnailUrl:
                  type: string
                  description: The URL of the article's thumbnail image (optional).
                  example: https://example.com/thumbnail.jpg
                  nullable: true
                status:
                  type: string
                  enum: [DRAFT, PUBLISHED, ARCHIVED]
                  description: The publication status of the article.
                  example: PUBLISHED
                tags:
                  type: array
                  items:
                    type: string
                  description: List of tag names to associate with the article (optional). All tag associations will be replaced.
                  example: ['Tech', 'AI']
      responses:
        '200':
          description: Article updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Article updated successfully
  /api/admin/articles/delete-article:
    delete:
      summary: Delete articles by IDs (soft delete)
      description: Deletes articles by their IDs (soft delete, sets deletedAt). Also removes associated tags.
      operationId: adminDeleteArticles
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - articleIds
              properties:
                articleIds:
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: Articles deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Deleted 2 article(s).
                  count:
                    type: integer
                    example: 2
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Some articles not found with the provided IDs
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Some articles not found or already deleted.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
