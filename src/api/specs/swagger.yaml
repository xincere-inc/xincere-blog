openapi: 3.0.0
info:
  title: Next.js API
  description: API documentation for Next.js 15 application
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local server
components:
  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UnAuthorizedError:
      type: object
      properties:
        error:
          type: string
          example: Unauthorized
        message:
          type: string
          example: Please log in.
    ForbiddenError:
      type: object
      properties:
        error:
          type: string
          example: Forbidden
        message:
          type: string
          example: You do not have permission.
    NotFoundError:
      type: object
      properties:
        error:
          type: string
          example: NotFound
        message:
          type: string
          example: The target data does not exist.
    UnprocessableEntity:
      type: object
      properties:
        error:
          type: string
          example: UnprocessableEntity
        message:
          type: string
          example: The submission content is not appropriate.
    ValidationError:
      type: object
      properties:
        error:
          type: string
          example: ValidationError
        errors:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: email
              message:
                type: string
                example: Invalid email address
    InternalServerError:
      type: object
      properties:
        error:
          type: string
          example: InternalServerError
        message:
          type: string
          example: Server error.
    Success:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Success
    Created:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          example: Created
    CreatedWithId:
      type: object
      required:
        - message
        - id
      properties:
        message:
          type: string
          example: Created
        id:
          type: number
          example: 1
tags:
  - name: Auth
    description: Endpoints related to authentication
  - name: Admin
    description: Endpoints for administrative actions
  - name: Contact
    description: Endpoints for contact form submissions
paths:
  /api/admin/users/create-user:
    post:
      summary: Register a new user
      description: >-
        Creates a new user, hashes their password, generates an email
        verification token, and sends a verification email.
      operationId: adminCreateUser
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - country
                - email
                - password
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                country:
                  type: string
                  example: Bangladesh
                gender:
                  type: string
                  enum:
                    - male
                    - female
                    - other
                  example: male
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
                phone:
                  type: string
                  example: '1234567890'
                address:
                  type: string
                  example: 123 Main St
                role:
                  type: string
                  example: user
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        '400':
          description: Validation errors or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'User already exists with this email: user@example.com'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/users/delete-user:
    delete:
      summary: Delete users by IDs
      description: >-
        Admin can delete user accounts including their own, but not other
        admins.
      operationId: adminDeleteUsers
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: string
                    format: uuid
                  example:
                    - 123e4567-e89b-12d3-a456-426614174000
                    - 123e4567-e89b-12d3-a456-426614174001
      responses:
        '200':
          description: Users deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Some users not found with the provided IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/users/get-user:
    post:
      summary: Fetch users with pagination and search
      description: Retrieves users from the database with pagination and optional search.
      operationId: adminGetUsers
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                search:
                  type: string
                  example: john
      responses:
        '200':
          description: Successfully retrieved users with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        email:
                          type: string
                        firstName:
                          type: string
                        lastName:
                          type: string
                        gender:
                          type: string
                        country:
                          type: string
                        address:
                          type: string
                        phone:
                          type: string
                        role:
                          type: string
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalUsers:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: page
                        message:
                          type: string
                          example: Page must be a number
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/users/update-user:
    put:
      summary: Update user details
      description: Update details of an existing user based on the provided user ID.
      operationId: adminUpdateUser
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  format: uuid
                  description: The ID of the user to update.
                  example: 123e4567-e89b-12d3-a456-426614174000
                email:
                  type: string
                  description: The email address of the user.
                  example: johndoe@example.com
                firstName:
                  type: string
                  description: The first name of the user.
                  example: John
                lastName:
                  type: string
                  description: The last name of the user.
                  example: Doe
                gender:
                  type: string
                  description: The gender of the user.
                  example: male
                address:
                  type: string
                  description: The address of the user.
                  example: 123 Main St, Springfield, IL
                phone:
                  type: string
                  description: The phone number of the user.
                  example: '+1234567890'
                role:
                  type: string
                  enum:
                    - user
                    - admin
                  description: The role of the user.
                  example: user
                country:
                  type: string
                  description: The country of the user.
                  example: USA
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174000
                      email:
                        type: string
                        example: johndoe@example.com
                      firstName:
                        type: string
                        example: John
                      lastName:
                        type: string
                        example: Doe
                      gender:
                        type: string
                        example: male
                      address:
                        type: string
                        example: 123 Main St, Springfield, IL
                      phone:
                        type: string
                        example: '+1234567890'
                      role:
                        type: string
                        enum:
                          - USER
                          - ADMIN
                        example: USER
                      country:
                        type: string
                        example: USA
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  errors:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          example: email
                        message:
                          type: string
                          example: Invalid email format
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  message:
                    type: string
                    example: Error during registration
  /api/admin/categories/create-category:
    post:
      summary: Create a new category
      description: Creates a new category with a unique name and slug.
      operationId: adminCreateCategory
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - slug
              properties:
                name:
                  type: string
                  description: The name of the category.
                  example: Technology
                slug:
                  type: string
                  description: The unique slug for the category.
                  example: technology
                description:
                  type: string
                  description: The description of the category (optional).
                  example: Articles related to technology and innovation.
                  nullable: true
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the category.
                        example: 1
                      name:
                        type: string
                        description: The name of the category.
                        example: Technology
                      slug:
                        type: string
                        description: The unique slug for the category.
                        example: technology
                      description:
                        type: string
                        description: The description of the category (optional).
                        example: Articles related to technology and innovation.
                        nullable: true
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or category already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Category already exists with this slug: technology'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/categories/get-category:
    post:
      summary: Fetch categories with pagination and search
      description: Retrieves categories from the database with pagination and optional search.
      operationId: adminGetCategories
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                search:
                  type: string
                  example: tech
      responses:
        '200':
          description: Successfully retrieved categories with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the category.
                          example: 1
                        name:
                          type: string
                          description: The name of the category.
                          example: Technology
                        slug:
                          type: string
                          description: The unique slug for the category.
                          example: technology
                        description:
                          type: string
                          description: The description of the category (optional).
                          example: Articles related to technology and innovation.
                          nullable: true
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was created.
                          example: 2025-06-05T07:55:00Z
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was last updated.
                          example: 2025-06-05T07:55:00Z
                        deletedAt:
                          type: string
                          format: date-time
                          description: The date and time when the category was deleted (optional).
                          example: null
                          nullable: true
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalCategories:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/categories/update-category:
    put:
      summary: Update category details
      description: Updates details of an existing category based on the provided category ID.
      operationId: adminUpdateCategory
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: The ID of the category to update.
                  example: 1
                name:
                  type: string
                  description: The name of the category.
                  example: Technology
                slug:
                  type: string
                  description: The unique slug for the category.
                  example: technology
                description:
                  type: string
                  description: The description of the category (optional).
                  example: Articles related to technology and innovation.
                  nullable: true
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Category updated successfully
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the category.
                        example: 1
                      name:
                        type: string
                        description: The name of the category.
                        example: Technology
                      slug:
                        type: string
                        description: The unique slug for the category.
                        example: technology
                      description:
                        type: string
                        description: The description of the category (optional).
                        example: Articles related to technology and innovation.
                        nullable: true
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the category was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/categories/delete-category:
    delete:
      summary: Delete categories by IDs
      description: Deletes categories by their IDs (soft delete, sets deletedAt).
      operationId: adminDeleteCategories
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: Categories deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Some categories not found with the provided IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/create-tag:
    post:
      summary: Create a new tag
      description: Creates a new tag with a unique name.
      operationId: adminCreateTag
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  description: The unique name of the tag.
                  example: Tech
      responses:
        '201':
          description: Tag created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Created
                  tag:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the tag.
                        example: 1
                      name:
                        type: string
                        description: The name of the tag.
                        example: Tech
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or tag already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Tag already exists with this name: Tech'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/get-tags:
    post:
      summary: Fetch tags with pagination and search
      description: Retrieves tags from the database with pagination and optional search.
      operationId: adminGetTags
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                page:
                  type: integer
                  example: 1
                limit:
                  type: integer
                  example: 10
                search:
                  type: string
                  example: tech
      responses:
        '200':
          description: Successfully retrieved tags with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: The unique identifier for the tag.
                          example: 1
                        name:
                          type: string
                          description: The name of the tag.
                          example: Tech
                        createdAt:
                          type: string
                          format: date-time
                          description: The date and time when the tag was created.
                          example: 2025-06-05T07:55:00Z
                        updatedAt:
                          type: string
                          format: date-time
                          description: The date and time when the tag was last updated.
                          example: 2025-06-05T07:55:00Z
                        deletedAt:
                          type: string
                          format: date-time
                          description: The date and time when the tag was deleted (optional).
                          example: null
                          nullable: true
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      showPerPage:
                        type: integer
                        example: 10
                      totalTags:
                        type: integer
                        example: 50
                      totalPages:
                        type: integer
                        example: 5
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/update-tag:
    put:
      summary: Update tag details
      description: Updates details of an existing tag based on the provided tag ID.
      operationId: adminUpdateTag
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: integer
                  description: The ID of the tag to update.
                  example: 1
                name:
                  type: string
                  description: The name of the tag.
                  example: Tech
      responses:
        '200':
          description: Tag updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tag updated successfully
                  tag:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: The unique identifier for the tag.
                        example: 1
                      name:
                        type: string
                        description: The name of the tag.
                        example: Tech
                      createdAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was created.
                        example: 2025-06-05T07:55:00Z
                      updatedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was last updated.
                        example: 2025-06-05T07:55:00Z
                      deletedAt:
                        type: string
                        format: date-time
                        description: The date and time when the tag was deleted (optional).
                        example: null
                        nullable: true
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/admin/tags/delete-tag:
    delete:
      summary: Delete tags by IDs
      description: Deletes tags by their IDs (soft delete, sets deletedAt).
      operationId: adminDeleteTags
      tags:
        - Admin
      security:
        - jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: Tags deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation errors or malformed request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnAuthorizedError'
        '404':
          description: Some tags not found with the provided IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/change-password:
    post:
      summary: Change user password
      description: >-
        Allows an authenticated user to change their password by providing the
        old and new password.
      operationId: changePassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  example: oldPassword123
                newPassword:
                  type: string
                  example: newSecurePassword456
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error, same old and new password, or invalid old password
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '401':
          description: Unauthorized or session expired
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/forget-password:
    post:
      summary: Send a password reset email
      description: >-
        Sends a reset password email with a secure token link. Each user is
        allowed a maximum of 3 emails per hour.
      operationId: ForgetPassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error or missing email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email is required
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email not found.
        '429':
          description: Too many requests within a short period
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Too many requests. Please try again later (1 hr).
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/register:
    post:
      summary: Register a new user
      description: >-
        Creates a new user, hashes their password, generates an email
        verification token, and sends a verification email.
      operationId: Register
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - email
                - password
                - confirmPassword
                - gender
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                country:
                  type: string
                  example: Bangladesh
                gender:
                  type: string
                  enum:
                    - male
                    - female
                    - other
                  example: male
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
                confirmPassword:
                  type: string
                  format: password
                  example: SecureP@ssw0rd
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        '400':
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/reset-password:
    post:
      summary: Reset password for a user
      description: >-
        Resets the user's password using a provided reset token and new
        password. The reset token is invalidated after the reset.
      operationId: resetPassword
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                  example: d4c79ab8-b6b7-48b4-b5a4-56e8d41be26f
                newPassword:
                  type: string
                  format: password
                  example: NewSecureP@ssw0rd
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid or expired token, or missing fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token and new password are required
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/verify-email-request:
    post:
      summary: Send verification email to a registered user
      description: >-
        This endpoint sends a verification email to the user with the provided
        email address.
      operationId: sendVerificationEmail
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Validation error or missing email
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Validation error
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        path:
                          type: array
                          items:
                            type: string
                        message:
                          type: string
        '404':
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Email not found.
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/auth/verify-email:
    get:
      summary: Verify user email
      description: >-
        Verifies the user's email address using a provided verification token.
        Marks the user's email as verified in the database.
      operationId: verifyEmail
      tags:
        - Auth
      parameters:
        - in: query
          name: token
          required: true
          description: The email verification token sent to the user's email address.
          schema:
            type: string
            example: d4c79ab8-b6b7-48b4-b5a4-56e8d41be26g
      responses:
        '200':
          description: Email successfully verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '400':
          description: Invalid or expired token, or token not provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Token is required
                  message:
                    type: string
                    example: The provided token is invalid or has expired
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /api/contact:
    post:
      summary: Submit a contact form inquiry
      tags:
        - Contact
      operationId: submitContactForm
      description: Submits a contact form with company details, contact information, and inquiry content. Stores the submission in the database and optionally sends a confirmation email.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - companyName
                - contactName
                - email
                - phone
                - inquiry
                - privacyPolicy
              properties:
                companyName:
                  type: string
                  description: The name of the company submitting the contact form.
                  example: Example Corp
                contactName:
                  type: string
                  description: The name of the contact person submitting the form.
                  example: John Doe
                email:
                  type: string
                  format: email
                  description: The email address of the contact person.
                  example: user@example.com
                phone:
                  type: string
                  description: The phone number of the contact person.
                  example: +1234567890
                inquiry:
                  type: string
                  description: The content of the inquiry or message.
                  example: I have a question about your services.
                privacyPolicy:
                  type: boolean
                  description: Indicates whether the user agrees to the privacy policy.
                  example: true
      responses:
        '201':
          description: Contact form submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Created'
        '400':
          description: Invalid input or missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'User already exists with this email: user@example.com'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
