//
// Autogenerated by `prisma-import`
// Any modifications will be overwritten on subsequent runs.
//

//
// base.prisma
//

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg"
}

//
// Analytics.prisma
//

model Analytics {
  id            Int       @id @default(autoincrement()) @map("id")
  article       Article   @relation(fields: [articleId], references: [id])
  articleId     Int       @unique @map("article_id")
  viewsCount    Int       @default(0) @map("views_count")
  likesCount    Int       @default(0) @map("likes_count")
  commentsCount Int       @default(0) @map("comments_count")
  lastViewedAt  DateTime? @map("last_viewed_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  deletedAt     DateTime? @map("deleted_at")

  @@map("analytics")
}

//
// Article.prisma
//

model Article {
  id              Int           @id @default(autoincrement()) @map("id")
  author          Author        @relation(fields: [authorId], references: [id])
  authorId        String        @map("author_id")
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      Int           @map("category_id")
  title           String        @map("title")
  slug            String        @unique @map("slug")
  summary         String        @map("summary")
  content         String        @map("content")
  markdownContent String        @map("markdown_content")
  thumbnailUrl    String?       @map("thumbnail_url")
  status          ArticleStatus @map("status")
  tags            ArticleTag[]
  comments        Comment[]
  likes           Like[]
  analytics       Analytics?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")

  @@map("articles")
}

//
// ArticleTag.prisma
//

model ArticleTag {
  article   Article @relation(fields: [articleId], references: [id])
  articleId Int     @map("article_id")
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int     @map("tag_id")

  @@id([articleId, tagId])
  @@map("article_tags")
}

//
// authors.prisma
//

model Author {
  id        String   @id @default(uuid()) @map("id")
  name      String   @map("name")
  title     String   @map("title")
  bio       String   @map("bio")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  articles Article[]

  @@map("authors") // テーブル名もスネークケースに変更
}

//
// Category.prisma
//

model Category {
  id          Int       @id @default(autoincrement()) @map("id")
  name        String    @map("name")
  slug        String    @unique @map("slug")
  description String?   @map("description")
  articles    Article[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("categories")
}

//
// Comment.prisma
//

model Comment {
  id        Int       @id @default(autoincrement()) @map("id")
  article   Article   @relation(fields: [articleId], references: [id])
  articleId Int       @map("article_id")
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @map("user_id")
  name      String?   @map("name")
  email     String?   @map("email")
  content   String    @map("content")
  status    String    @default("pending") @map("status")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("comments")
}

//
// Contact.prisma
//

model Contact {
  id            Int           @id @default(autoincrement())
  companyName   String
  contactName   String
  email         String
  phone         String
  inquiry       String
  privacyPolicy Boolean
  status        ContactStatus @default(OPEN) @map("status")
  createdAt     DateTime      @default(now()) @map("created_at")

  @@map("contacts")
}

//
// enums.prisma
//

enum Gender {
  male
  female
  other
}

enum Role {
  user
  admin
}

enum UserRole {
  ADMIN
  AUTHOR
  EDITOR
  USER
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum ContactStatus {
  OPEN
  INPROGRESS
  CLOSED
}

//
// Like.prisma
//

model Like {
  id        Int       @id @default(autoincrement()) @map("id")
  article   Article   @relation(fields: [articleId], references: [id])
  articleId Int       @map("article_id")
  user      User      @relation(fields: [userId], references: [id])
  userId    String    @map("user_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("likes")
}

//
// Media.prisma
//

model Media {
  id         Int       @id @default(autoincrement()) @map("id")
  uploader   User      @relation(fields: [uploaderId], references: [id])
  uploaderId String    @map("uploader_id")
  fileName   String    @map("file_name")
  fileUrl    String    @map("file_url")
  mimeType   String    @map("mime_type")
  size       Int       @map("size")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("media")
}

//
// SiteSetting.prisma
//

model SiteSetting {
  key       String    @id @map("key")
  value     String    @map("value")
  updatedAt DateTime  @updatedAt @map("updated_at")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("site_settings")
}

//
// Tag.prisma
//

model Tag {
  id        Int          @id @default(autoincrement()) @map("id")
  name      String       @unique @map("name")
  articles  ArticleTag[]
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  deletedAt DateTime?    @map("deleted_at")

  @@map("tags")
}

//
// User.prisma
//

model User {
  id                     String    @id @default(uuid())
  firstName              String    @map("first_name")
  lastName               String?   @map("last_name")
  email                  String    @unique
  address                String?   @default("")
  gender                 Gender?
  role                   Role      @default(user) // User role, default is user
  country                String?
  password               String
  emailVerified          Boolean   @default(false) @map("email_verified") // Email verification status
  emailVerificationToken String?   @unique @map("email_verified_token") // Email verification token
  resetPasswordToken     String?   @unique @map("reset_password_token") // リセット用トークン
  resetPasswordMailCount Int       @default(0) @map("reset_password_mail_count") // 1時間あたりの送信回数
  resetPasswordMailTime  DateTime? @map("reset_password_mail_time") // 最終送信時刻
  createdAt              DateTime  @default(now()) @map("created_at") // Created at

  comments  Comment[]
  likes     Like[]
  media     Media[]
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  @@map("users")
}
